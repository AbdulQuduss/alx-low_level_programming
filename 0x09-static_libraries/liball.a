!<arch>
0-isupper.c/    0           0     0     644     217       `
/**
 * _isupper - This function checks for uppercase
 * @c: The input character
 * Return: 1 if true and 0 if false
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
	return (0);
	}
}

0-memset.c/     0           0     0     644     408       `
#include "main.h"
/**
 *  * _memset - fill a block of memory with a specific value
 *   * @s: starting address of memory to be filled
 *    * @b: the desired value
 *     * @n: number of bytes to be changed
 *      *
 *       * Return: changed array with new value for n bytes
 */
char *_memset(char *s, char b, unsigned int n)
{
		int i = 0;

		for (; n > 0; i++)
		{
		s[i] = b;
		n--;
		}
		return (s);
}
0-strcat.c/     0           0     0     644     378       `
/**
 * _strcat - Yhis function returns a concatenated string
 * @dest: destination string
 * @src: source string
 * Return: dest
 */
char *_strcat(char *dest, char *src)
{
	int destl = 0;
	int srcl = 0;
	int i;

	for (i = 0; dest[i] != '\0'; i++)
		destl++;
	for (i = 0; src[i] != '\0'; i++)
		srcl++;

	for (i = 0; i <= srcl; i++)
		dest[destl + i] = src[i];
	return (dest);
}
1-isdigit.c/    0           0     0     644     220       `
/**
 * _isdigit - This functon checks for a digit between 0 and 9
 * @c: Input digit
 * Return: 1 if true and 0 if false
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
	return (1);
	}
	else
	{
	return (0);
	}
}
1-memcpy.c/     0           0     0     644     388       `
#include "main.h"
/**
 *  *_memcpy - a function that copies memory area
 *   *@dest: memory where is stored
 *    *@src: memory where is copied
 *     *@n: number of bytes
 *      *
 *       *Return: copied memory with n bytes changed
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	int r = 0;
	int i = n;

	for (; r < i; r++)
	{
	dest[r] = src[r];
	n--;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     402       `
#include "main.h"
/**
 * _strncat - concatenate two strings
 * using at most n bytes from src
 * @dest: input value
 * @src: input value
 * @n: input value
 *
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int i;
	int j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (j < n && src[j] != '\0')
	{
	dest[i] = src[j];
	i++;
	j++;
	}
	dest[i] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     44        `
#include <stdio.h>

int _atoi(char *s)
{

}
2-strchr.c/     0           0     0     644     252       `
#include "main.h"
/**
 *  * _strchr - Entry point
 *   * @s: input
 *    * @c: input
 *     * Return: Always 0 (Success)
 */
char *_strchr(char *s, char c)
{
	int i = 0;

	for (; s[i] >= '\0'; i++)
	{
	if (s[i] == c)
	return (&s[i]);
	}
	return (0);
}
2-strlen.c/     0           0     0     644     209       `
/**
 * _strlen - This function returns the length of a string
 * @s: input string
 * Return: length of string
 */
int _strlen(char *s)
{
	int m;

	m = 0;

	while (*s != '\0')
	{
	m++;
	s++;
	}

	return (m);
}

2-strncpy.c/    0           0     0     644     330       `
#include "main.h"
/**
 * _strncpy - copy a string
 * @dest: input value
 * @src: input value
 * @n: input value
 *
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int j;

	j = 0;
	while (j < n && src[j] != '\0')
	{
		dest[j] = src[j];
		j++;
	}
	while (j < n)
	{
		dest[j] = '\0';
		j++;
	}

	return (dest);
}
3-islower.c/    0           0     0     644     189       `
/**
 * _islower - This function checks if @c is a lower character
 * @c: input character
 * Return: 1 if successful but 0 if not
 */
int _islower(int c)
{
	return (c >= 'a' && c <= 'z');
}

3-puts.c/       0           0     0     644     216       `
#include "main.h"
/**
 * _puts - This function prints a string on the screen
 * @str: input string
 * Return: void always
 */
void _puts(char *str)
{
	while (*str != '\0')
	{
	_putchar(*str++);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     305       `
#include "main.h"
/**
 * _strcmp - compare string values
 * @s1: input value
 * @s2: input value
 *
 * Return: s1[i] - s2[i]
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	i = 0;
	while (s1[i] != '\0' && s2[i] != '\0')
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
		i++;
	}
	return (0);
}

3-strspn.c/     0           0     0     644     368       `
#include "main.h"
/**
 *  * _strspn - Entry point
 *   * @s: input
 *    * @accept: input
 *     * Return: Always 0 (Success)
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int r;

	while (*s)
	{
	for (r = 0; accept[r]; r++)
	{
	if (*s == accept[r])
	{
	n++;
	break;
	}
	else if (accept[r + 1] == '\0')
	return (n);
	}
	s++;
	}
	return (n);
}
4-isalpha.c/    0           0     0     644     211       `
/**
 * _isalpha - This function checks if @c is an alphabet
 * @c: input character
 * Return: 1 if successful but 0 if not
 */
int _isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}

4-strpbrk.c/    0           0     0     644     296       `
#include "main.h"
/**
 *  * _strpbrk - Entry point
 *   * @s: input
 *    * @accept: input
 *     * Return: Always 0 (Success)
 */
char *_strpbrk(char *s, char *accept)
{
	int k;

	while (*s)
	{
	for (k = 0; accept[k]; k++)
	{

		if (*s == accept[k])
		return (s);
	}
	s++;
	}

	return ('\0');
}
5-strstr.c/     0           0     0     644     373       `
#include "main.h"
/**
 *  * _strstr - Entry point
 *   * @haystack: input
 *    * @needle: input
 *     * Return: Always 0 (Success)
 */
char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
	char *l = haystack;
	char *p = needle;

	while (*l == *p && *p != '\0')
	{
	l++;
	p++;
	}

	if (*p == '\0')
	return (haystack);
	}

	return (0);
}

6-abs.c/        0           0     0     644     246       `
#include <stdio.h>

/**
 * _abs - This function computes the absolute value of a character
 * @num: data type of input
 * Return: the absolute value of num
 */
int _abs(int num)
{
	if (num >= 0)
	{
	return (num);
	}
	else
	{
	return (-num);
	}
}
9-strcpy.c/     0           0     0     644     322       `
/**
 * char *_strcpy - a function that copies the string pointed to by src
 * @dest: copy to
 * @src: copy from
 * Return: string
 */
char *_strcpy(char *dest, char *src)
{
	int l = 0;
	int i = 0;

	while (*(src + l) != '\0')
	{
		l++;
	}
	for ( ; i < l ; i++)
	{
		dest[i] = src[i];
	}
	dest[l] = '\0';
	return (dest);
}
_putchar.c/     0           0     0     644     244       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
